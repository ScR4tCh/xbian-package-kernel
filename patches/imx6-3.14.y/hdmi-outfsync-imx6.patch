commit ccf72e12304da74383e1843bf266a4e94941c6f9
Author: Matus Kral <matuskral@me.com>
Date:   Sun Nov 23 17:08:59 2014 +0100

    prevent out of sync on hdmi

diff --git a/drivers/video/mxc/mxc_hdmi.c b/drivers/video/mxc/mxc_hdmi.c
index 43ccd29..aa6362f 100644
--- a/drivers/video/mxc/mxc_hdmi.c
+++ b/drivers/video/mxc/mxc_hdmi.c
@@ -27,6 +27,8 @@
  * published by the Free Software Foundation.
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/device.h>
@@ -181,6 +183,8 @@ struct mxc_hdmi {
 	bool phy_enabled;
 	struct fb_videomode default_mode;
 	struct fb_videomode previous_non_vga_mode;
+	u32 previous_non_vga_mode_xvirt;
+	u32 previous_non_vga_mode_yvirt;
 	bool requesting_vga_for_initialization;
 
 	int *gpr_base;
@@ -1362,8 +1366,6 @@ static void mxc_hdmi_phy_init(struct mxc_hdmi *hdmi)
 	}
 
 	hdmi->phy_enabled = true;
-	if (!hdmi->hdmi_data.video_mode.mDVI)
-		hdmi_enable_overflow_interrupts();
 }
 
 static void hdmi_config_AVI(struct mxc_hdmi *hdmi)
@@ -1839,7 +1841,7 @@ static void hdmi_disable_overflow_interrupts(void)
 	pr_debug("%s\n", __func__);
 	hdmi_writeb(HDMI_IH_MUTE_FC_STAT2_OVERFLOW_MASK,
 		    HDMI_IH_MUTE_FC_STAT2);
-	hdmi_writeb(0xff, HDMI_FC_MASK2);
+	hdmi_writeb(0x7f, HDMI_FC_MASK2);
 }
 
 static void mxc_hdmi_notify_fb(struct mxc_hdmi *hdmi)
@@ -1889,9 +1891,10 @@ static void mxc_hdmi_edid_rebuild_modelist(struct mxc_hdmi *hdmi)
 		mode = &hdmi->fbi->monspecs.modedb[i];
 
 		if ((mode->vmode & FB_VMODE_INTERLACED) ||
-		    (hdmi->edid_cfg.hdmi_cap &&
-		    (mxc_edid_mode_to_vic(mode) == 0)))
-			continue;
+			(hdmi->edid_cfg.hdmi_cap && 
+			(mxc_edid_mode_to_vic(mode) == 0)) ||
+			(!mode->vmode))
+				continue;
 
 		dev_dbg(&hdmi->pdev->dev, "Added mode %d:", i);
 		dev_dbg(&hdmi->pdev->dev,
@@ -1905,6 +1908,8 @@ static void mxc_hdmi_edid_rebuild_modelist(struct mxc_hdmi *hdmi)
 		fb_add_videomode(mode, &hdmi->fbi->modelist);
 	}
 
+	fb_new_modelist(hdmi->fbi);
+
 	console_unlock();
 }
 
@@ -1936,6 +1941,8 @@ static void  mxc_hdmi_default_modelist(struct mxc_hdmi *hdmi)
 			fb_add_videomode(mode, &hdmi->fbi->modelist);
 	}
 
+	fb_new_modelist(hdmi->fbi);
+
 	console_unlock();
 }
 
@@ -1977,16 +1984,27 @@ static void mxc_hdmi_set_mode(struct mxc_hdmi *hdmi)
 	}
 
 	/* If video mode same as previous, init HDMI again */
-	if (fb_mode_is_equal(&hdmi->previous_non_vga_mode, mode)) {
+	if (fb_mode_is_equal(&hdmi->previous_non_vga_mode, mode) && hdmi->edid_status == HDMI_EDID_SAME) {
 		dev_dbg(&hdmi->pdev->dev,
-				"%s: Video mode same as previous\n", __func__);
+				"%s: Video mode and EDID same as previous\n", __func__);
 		/* update fbi mode in case modelist is updated */
 		hdmi->fbi->mode = (struct fb_videomode *)mode;
+		hdmi->fbi->var.xres_virtual = hdmi->previous_non_vga_mode_xvirt;
+		hdmi->fbi->var.yres_virtual = hdmi->previous_non_vga_mode_yvirt;
 		/* update hdmi setting in case EDID data updated  */
 		mxc_hdmi_setup(hdmi, 0);
+	} else if (fb_mode_is_equal(&hdmi->previous_non_vga_mode, mode)) {
+		dev_dbg(&hdmi->pdev->dev,
+				"%s: Video mode same as previous\n", __func__);
+		/* update fbi mode in case modelist is updated */
+		hdmi->fbi->mode = (struct fb_videomode *)mode;
+		dump_fb_videomode(hdmi->fbi->mode);
+		fb_videomode_to_var(&hdmi->fbi->var, mode);
+		hdmi->fbi->var.xres_virtual = hdmi->previous_non_vga_mode_xvirt;
+		hdmi->fbi->var.yres_virtual = hdmi->previous_non_vga_mode_yvirt;
+		mxc_hdmi_notify_fb(hdmi);
 	} else {
 		dev_dbg(&hdmi->pdev->dev, "%s: New video mode\n", __func__);
-		mxc_hdmi_set_mode_to_vga_dvi(hdmi);
 		fb_videomode_to_var(&hdmi->fbi->var, mode);
 		dump_fb_videomode((struct fb_videomode *)mode);
 		mxc_hdmi_notify_fb(hdmi);
@@ -2041,6 +2059,9 @@ static void mxc_hdmi_cable_connected(struct mxc_hdmi *hdmi)
 static int mxc_hdmi_power_on(struct mxc_dispdrv_handle *disp)
 {
 	struct mxc_hdmi *hdmi = mxc_dispdrv_getdata(disp);
+
+	dev_dbg(&hdmi->pdev->dev, "%s reg %d cable %d blank %d\n", __func__, hdmi->fb_reg, hdmi->cable_plugin, hdmi->blank);
+
 	mxc_hdmi_phy_init(hdmi);
 	return 0;
 }
@@ -2048,6 +2069,9 @@ static int mxc_hdmi_power_on(struct mxc_dispdrv_handle *disp)
 static void mxc_hdmi_power_off(struct mxc_dispdrv_handle *disp)
 {
 	struct mxc_hdmi *hdmi = mxc_dispdrv_getdata(disp);
+
+	dev_dbg(&hdmi->pdev->dev, "%s\n", __func__);
+
 	mxc_hdmi_phy_disable(hdmi);
 }
 
@@ -2083,15 +2108,18 @@ static void hotplug_worker(struct work_struct *work)
 	hdmi_phy_stat0 = hdmi_readb(HDMI_PHY_STAT0);
 	hdmi_phy_pol0 = hdmi_readb(HDMI_PHY_POL0);
 
-	if (hdmi->latest_intr_stat & hdmi->plug_event) {
+	dev_dbg(&hdmi->pdev->dev, "phy_int_stat=0x%x/0x%x, phy_int_pol=0x%x, plug_event=0x%x, plug_mask=0x%x\n",
+			hdmi_phy_stat0, hdmi->latest_intr_stat, hdmi_phy_pol0, hdmi->plug_event, hdmi->plug_mask);
+
 		/* Make HPD intr active low to capture unplug event or
 		 * active high to capture plugin event */
 		hdmi_writeb((hdmi->plug_mask & ~hdmi_phy_pol0), HDMI_PHY_POL0);
 
-		/* check cable status */
-		if (hdmi_phy_stat0 & hdmi->plug_mask) {
+		/* cable connection changes */
+		if (hdmi_phy_pol0 & hdmi->plug_mask) {
 			/* Plugin event */
 			dev_dbg(&hdmi->pdev->dev, "EVENT=plugin\n");
+			hdmi_set_cable_state(1);
 			mxc_hdmi_cable_connected(hdmi);
 
 			sprintf(event_string, "EVENT=plugin");
@@ -2099,7 +2127,6 @@ static void hotplug_worker(struct work_struct *work)
 #ifdef CONFIG_MXC_HDMI_CEC
 			mxc_hdmi_cec_handle(0x80);
 #endif
-			hdmi_set_cable_state(1);
 		} else {
 			/* Plugout event */
 			dev_dbg(&hdmi->pdev->dev, "EVENT=plugout\n");
@@ -2113,7 +2140,6 @@ static void hotplug_worker(struct work_struct *work)
 			mxc_hdmi_cec_handle(0x100);
 #endif
 		}
-	}
 
 	/* Lock here to ensure full powerdown sequence
 	 * completed before next interrupt processed */
@@ -2184,7 +2210,6 @@ static irqreturn_t mxc_hdmi_hotplug(int irq, void *data)
 	if (intr_stat & hdmi->plug_event) {
 
 		dev_dbg(&hdmi->pdev->dev, "Hotplug interrupt received\n");
-		dev_dbg(&hdmi->pdev->dev, "intr_stat %u plug_event %u\n", intr_stat, hdmi->plug_event);
 		hdmi->latest_intr_stat = intr_stat;
 
 		/* Mute interrupts until handled */
@@ -2201,7 +2226,10 @@ static irqreturn_t mxc_hdmi_hotplug(int irq, void *data)
 		hdmi_writeb(hdmi->plug_event, HDMI_IH_PHY_STAT0);
 
 		if(hdmi_inited) {
-			mod_timer(&hdmi->jitter_timer, jiffies + HZ);
+			if (!hdmi->dft_mode_set)
+				mod_timer(&hdmi->jitter_timer, jiffies + msecs_to_jiffies(20));
+			else
+				mod_timer(&hdmi->jitter_timer, jiffies + HZ);
 		}
 	}
 
@@ -2210,7 +2238,7 @@ static irqreturn_t mxc_hdmi_hotplug(int irq, void *data)
 		val = hdmi_readb(HDMI_A_APIINTSTAT);
 		if (val != 0) {
 			/* Mute interrupts until interrupt handled */
-			val = 0xFF;
+			val = 0x7F;
 			hdmi_writeb(val, HDMI_A_APIINTMSK);
 			schedule_delayed_work(&(hdmi->hdcp_hdp_work), msecs_to_jiffies(50));
 		}
@@ -2238,9 +2266,11 @@ static void mxc_hdmi_setup(struct mxc_hdmi *hdmi, unsigned long event)
 		 * vga default. */
 		memcpy(&hdmi->previous_non_vga_mode, &m,
 		       sizeof(struct fb_videomode));
+		hdmi->previous_non_vga_mode_xvirt = hdmi->fbi->var.xres_virtual;
+		hdmi->previous_non_vga_mode_yvirt = hdmi->fbi->var.yres_virtual;
 		if (!list_empty(&hdmi->fbi->modelist)) {
 			edid_mode = fb_find_nearest_mode(&m, &hdmi->fbi->modelist);
-			pr_debug("edid mode ");
+			pr_debug("edid mode vx:%d vy:%d", hdmi->fbi->var.xres_virtual, hdmi->fbi->var.yres_virtual);
 			dump_fb_videomode((struct fb_videomode *)edid_mode);
 			/* update fbi mode */
 			hdmi->fbi->mode = (struct fb_videomode *)edid_mode;
@@ -2330,6 +2360,9 @@ static void mxc_hdmi_setup(struct mxc_hdmi *hdmi, unsigned long event)
 
 	mxc_hdmi_clear_overflow(hdmi);
 
+	if (!hdmi->hdmi_data.video_mode.mDVI)
+		hdmi_enable_overflow_interrupts();
+
 	dev_dbg(&hdmi->pdev->dev, "%s exit\n\n", __func__);
 
 }
@@ -2373,6 +2406,7 @@ static int mxc_hdmi_fb_event(struct notifier_block *nb,
 {
 	struct fb_event *event = v;
 	struct mxc_hdmi *hdmi = container_of(nb, struct mxc_hdmi, nb);
+	unsigned long flags;
 
 	if (strcmp(event->info->fix.id, hdmi->fbi->fix.id))
 		return 0;
@@ -2404,6 +2438,7 @@ static int mxc_hdmi_fb_event(struct notifier_block *nb,
 
 			hdmi->blank = *((int *)event->data);
 
+			spin_lock_irqsave(&hdmi->irq_lock, flags);
 			/* Re-enable HPD interrupts */
 			val = hdmi_readb(HDMI_PHY_MASK0);
 			val &= ~hdmi->plug_mask;
@@ -2411,10 +2446,12 @@ static int mxc_hdmi_fb_event(struct notifier_block *nb,
 
 			/* Unmute interrupts */
 			hdmi_writeb(~hdmi->plug_event, HDMI_IH_MUTE_PHY_STAT0);
+			spin_unlock_irqrestore(&hdmi->irq_lock, flags);
 
 			if (hdmi->fb_reg && hdmi->cable_plugin)
 				mxc_hdmi_setup(hdmi, val);
 			hdmi_set_blank_state(1);
+
 		} else if (*((int *)event->data) != hdmi->blank) {
 			dev_dbg(&hdmi->pdev->dev,
 				"event=FB_EVENT_BLANK - BLANK\n");
@@ -2650,7 +2687,7 @@ static int mxc_hdmi_disp_init(struct mxc_dispdrv_handle *disp,
 
 	/* Set the default mode and modelist when disp init. */
 	fb_find_mode(&hdmi->fbi->var, hdmi->fbi,
-		     hdmi->dft_mode_str, NULL, 0, NULL,
+		     hdmi->dft_mode_str, mxc_cea_mode, ARRAY_SIZE(mxc_cea_mode), NULL,
 		     hdmi->default_bpp);
 
 	console_lock();
